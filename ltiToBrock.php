<?php
//Function for processing data generated by an LTI consumer 
//Should accept both roster based section information using "lis_course_offering_sourcedid" and a course name parse

//Accepts an LTI data string generated by a LTI consumer
//Return both the 4 and 8 digit codes for the class
function translateLtiToBrock($lis_course_offering_sourcedid, $title, $userDefault){
	
	//----------First try using the roster approach----------//

	//Check if lis_course_offering_sourcedid or the custom custom_sourcedid are set
	if(isset($lis_course_offering_sourcedid)){

		if (is_valid_domain_name(strstr($lis_course_offering_sourcedid,':',true))) { //Does the lis_course_offering_sourcedid look like a TLD? Then this isn't Sakai.
			$offeringSourcedidArray = str_split($lis_course_offering_sourcedid, strpos($lis_course_offering_sourcedid,":")+1);
			$sourcedidNG = explode("-", $offeringSourcedidArray[1]);
			
			//Generate the four and eight code
			$fourCode = $sourcedidNG[4];
			$eightCode = $sourcedidNG[4].$sourcedidNG[5];
			
			//Grab the duration
			$duration = $sourcedidNG[2];
			
			//Grab the term
			$term = $sourcedidNG[1];
			
			//Grab the two digit year
			$year = substr($sourcedidNG[0],2,4); //NN
			
			$status = "sourcedid-NG";
			
		} 
		else { //First replace the colons with dashes - Brock University SAKORA-like
		
		$lis_course_offering_sourcedid = str_replace(":", "-", $lis_course_offering_sourcedid); //First replace the colons with dashes - Brock University SAKORA-like
		
		//We need to account for multiple sections which are deliniated by a plus +
		$sourcedidArray = explode("+", $lis_course_offering_sourcedid);
		
		//Lets run through the sections
		foreach($sourcedidArray as $sourcedid){
		
			//Now lets make an array for each section exploiding on dashes
			$allSections[] = explode("-", $sourcedid);
				
			//The order of the array should be, assuming (2016-FW-D03:PCUL-3P21:S01-SEM-SS04)
			//Year(2016) - Session(FW) - Duration(D02) - Subject(PCUL) - Code(3P21) - Section(S01) - Type(SEM) - Secondary Section(SS04)		
		}
		
		//Which section are we using?
		//This needs work, allow user to pick which section will be default
		$defaultSection = 0;
		
		//Generate the four and eight code
		$fourCode = $allSections[$defaultSection][3];
		$eightCode = $allSections[$defaultSection][3].$allSections[$defaultSection][4];
		
		
		//Grab the duration
		$duration = $allSections[$defaultSection][2];

		//Grab the term
		$term = $allSections[$defaultSection][1];
		
		//Grab the two digit year
		$year = substr($allSections[$defaultSection][0], 0, 2);
		
		//Set status of sourcedid
		$status = "sourcedid";
		}
	}
	//----------Fallback to name parsing----------//
	else{
		//Check if there is a dash (signifying multiple courses) and grab the four digit code
		$dashLoc = strrpos($title, "-");

		//If it does have a dash add 1 to start at the next character
		if ($dashLoc !== 0){ $dashLoc++;}

		//Substring out the course name and add a space
		$fourCode = substr($title, 0, 4);
		$eightCode = $fourCode.substr($title, ($dashLoc+4), 4);	

		//Grab the duration from the title (8 characters after the -)
                $duration = substr($title, ($dashLoc+8), 3);

                //Pull out the 0 in the duration as the bookstore doesn't use it in single digit durations
                if($duration[1] == "0"){
                        $one = $duration[0];
                        $two = $duration[2];
                        $duration = $one.$two;
                }

                //Need to Pull out the term (11 characters after the -)
                $term = substr($title, ($dashLoc+11), 2);

                //Pull the two final digit year out the title
                $year = substr($title, ($dashLoc+15), 2);
		
		//Set status course name
		$status = "course name";
	}
	
	//Send the four and eight code representations back
	return array($fourCode, $eightCode, $duration, $term, $year, $status);	
}

function is_valid_domain_name($domain_name) {
	return (preg_match("/^([a-zd](-*[a-zd])*)(.([a-zd](-*[a-zd])*))*$/i", $domain_name) //valid characters check
	&& preg_match("/^.{1,253}$/", $domain_name) //overall length check
	&& preg_match("/^[^.]{1,63}(.[^.]{1,63})*$/", $domain_name) ); //length of every label
}

?>
